"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../Constants");
const INITIAL_STATE = {
    cameraPermissionDenied: false,
    cameraPermissionGranted: false,
    devices: [],
    hasAudioOutput: false,
    hasCamera: false,
    hasMicrophone: false,
    microphonePermissionDenied: false,
    microphonePermissionGranted: false,
    requestingCameraCapture: false,
    requestingCapture: false,
    requestingMicrophoneCapture: false
};
function default_1(state = INITIAL_STATE, action) {
    if (action.type === Constants_1.DEVICES) {
        const devices = action.payload;
        const audioInputs = devices.filter(d => d.kind === 'audioinput');
        const videoInputs = devices.filter(d => d.kind === 'videoinput');
        const audioOutputs = devices.filter(d => d.kind === 'audiooutput');
        return {
            ...state,
            cameraPermissionGranted: videoInputs.filter(d => !!d.label).length > 0,
            devices: devices.filter(d => !!d.label),
            hasAudioOutput: audioOutputs.length > 0,
            hasCamera: videoInputs.length > 0,
            hasMicrophone: audioInputs.length > 0,
            microphonePermissionGranted: audioInputs.filter(d => !!d.label).length > 0
        };
    }
    if (action.type === Constants_1.CAMERA_PERMISSION_DENIED) {
        return {
            ...state,
            cameraPermissionDenied: true
        };
    }
    if (action.type === Constants_1.MICROPHONE_PERMISSION_DENIED) {
        return {
            ...state,
            microphonePermissionDenied: true
        };
    }
    if (action.type === Constants_1.DEVICE_CAPTURE) {
        return {
            ...state,
            requestingCameraCapture: action.payload.camera,
            requestingCapture: action.payload.camera || action.payload.microphone,
            requestingMicrophoneCapture: action.payload.microphone
        };
    }
    return state;
}
exports.default = default_1;
