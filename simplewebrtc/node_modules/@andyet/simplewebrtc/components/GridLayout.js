"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const GRID_AREAS = 'abcdefghijklmnopqrstuvwxyz';
function getGridTemplateAreas(numberOfStreams) {
    if (numberOfStreams === 1) {
        return `"a"`;
    }
    else if (numberOfStreams === 2) {
        return `"a b"`;
    }
    else if (numberOfStreams === 3) {
        return `"a b" "a c"`;
    }
    const columns = Math.ceil(Math.pow(numberOfStreams, 0.5));
    const rows = Math.ceil(numberOfStreams / columns);
    const gridTemplateRows = [];
    for (let i = 0; i < rows; i++) {
        let row = '';
        for (let j = 0; j < columns; j++) {
            row += GRID_AREAS.charAt(i * columns + j);
        }
        gridTemplateRows.push(`"${row.split('').join(' ')}"`);
    }
    return gridTemplateRows.join(' ');
}
function getGridTemplateColumns(numberOfStreams) {
    return Math.ceil(Math.pow(numberOfStreams, 0.5));
}
function getGridTemplateRows(numberOfStreams) {
    return Math.ceil(numberOfStreams / Math.ceil(Math.pow(numberOfStreams, 0.5)));
}
function getGridArea(index) {
    return GRID_AREAS.charAt(index);
}
function CellContainer(props) {
    return (React.createElement("div", { style: {
            display: 'flex',
            gridArea: getGridArea(props.index),
            overflow: 'hidden'
        } }, props.content));
}
function GridContainer(props) {
    return (React.createElement("div", { id: props.id, className: props.className, style: {
            display: 'grid',
            gridTemplateAreas: getGridTemplateAreas(props.itemCount),
            gridTemplateColumns: `repeat(${getGridTemplateColumns(props.itemCount)}, 1fr)`,
            gridTemplateRows: `repeat(${getGridTemplateRows(props.itemCount)}, 1fr)`
        } }, props.content));
}
/**
 * @description
 *
 * @public
 *
 */
class GridLayout extends React.Component {
    render() {
        const items = this.props.items;
        const rendered = [];
        let index = 0;
        for (const item of items) {
            const renderedItem = this.props.renderCell(item);
            if (renderedItem) {
                rendered.push(React.createElement(CellContainer, { index: index, key: index, content: renderedItem }));
                index += 1;
            }
        }
        return (React.createElement(GridContainer, { id: this.props.id, className: this.props.className, itemCount: rendered.length, content: rendered }));
    }
}
exports.default = GridLayout;
